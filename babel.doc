babel-core Babel 
是一个工具链，主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够
babel 的核心功能包含在 @babel/core 模块中

babel-preset-react
Babel 能够转换 JSX 语法！查看 React preset 了解更多信息。通过和 babel-sublime 一起使用还可以把语法高亮的功能提升到一个新的水平。

babel-prolyfill
@babel/polyfill 模块包括 core-js 和一个自定义的 regenerator runtime 模块用于模拟完整的 ES2015+ 环境。
这意味着你可以使用诸如 Promise 和 WeakMap 之类的新的内置组件、 Array.from 或 Object.assign 之类的静态方法、 
Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。
举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片


安装好后配置.babelrc或babel.config.js文件，官方推荐用wbabel.config.js方案，babel本身使用这种方案

babel-loader
在webpack中配置babel-loader解析ES6并转换为ES5

babel-plugin-transform-runtime 
在转换 ES2015 语法为 ECMAScript 5 的语法时，babel 会需要一些辅助函数，例如 _extend。babel 默认会将这些辅助函数内联到每一个 js 文件里，这样文件多的时候，项目就会很大。
所以 babel 提供了 transform-runtime 来将这些辅助函数“搬”到一个单独的模块 babel-runtime 中，这样做能减小项目文件的大小。
配置在.babelrc
"plugins": [
       "transform-runtime"
     ]

bable-loader 的版本需要和其他插件对应，8.X的版本不能对应babel 6.X, 只能降回去7.X对应6.X

babel-preset-stage-3 使用这个插件来编译为了后面使用...state扩展运算符可以使用